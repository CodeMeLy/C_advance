dealine: 1/3/2021
Bài 1. Viết các hàm sau làm việc với dãy số có sử dụng cấp phát bộ nhớ động cho mảng
thông qua toán tử new hoặc hàm calloc hay malloc
a. Hàm nhập vào một dãy n số thực thỏa mãn:
- Mẫu hàm : int Nhap(float **a);
- Hàm trả về số phần tử nhập vào mảng
- Thân hàm cấp phát bộ nhớ cho con trỏ (VD: *a = new float [n+1];)
b. Hàm tìm max của những phần tử dương (nếu có)
- Mẫu hàm : int MaxDuong(int n, float *a, float *max);
- Hàm trả về 0 nếu mảng không có số dương và 1 nếu ngược lại
- Truyền giá trị ra qua tham biến con trỏ float *max
c. Kiểm tra dãy vừa nhập có tính chất Fibonaccy không tức là từ a3 trở đi đều phải bằng
tổng 2 số đứng trước không
- Mẫu hàm : int Fibo(int n, float *a);
- Hàm trả về 0 nếu mảng không có tính chất và 1 nếu ngược lại
d. Viết hàm menu sau đó là hàm main thực hiện các thao tác
- Mẫu hàm : int Menu();
- Hàm trả về giá trị menu nếu được chọn trong [1…5]
1. Nhập dãy
2. Xuất dãy
3. Tìm max dương
4. Kiểm tra tính Fibonacci
5. Thoát
Bài 2. Tạo cấu trúc Sach gồm: Tên Sách, Tác giả, Năm Xuất Bản. Viết các hàm sau làm việc
với danh sách có n quyển sách có sử dụng cấp phát bộ nhớ động cho mảng cấu trúc thông qua
toán tử new hoặc hàm calloc hay malloc
a. Hàm nhập vào một dãy n cuốn sách thỏa mãn:
- Mẫu hàm : void Nhap(int *n, Sach *&amp;A);
- Nhập số cuốn sách n trả ra truyền qua tham biến con trỏ n
- Thân hàm cấp phát bộ nhớ cho con trỏ Sach (Vd: A = new Sach[n+1];)
b. Xuất ra màn hình thông tin n cuốn sách với đủ các trường
- Mẫu hàm : void Xuat(int n, Sach A[]);
c. Nhập vào tên một tác giả đếm xem tác giả của bao nhiêu cuốn
- Mẫu hàm : int DemSach(int n, Sach *a);

- Hàm trả về số cuốn đếm được
d. Thống kê theo năm xuất bản
- Mẫu hàm : void Thongke(int n, Sach *a);
- Thống kê từng năm có bao nhiêu cuốn theo mẫu
1. 2001 : 2 cuon
2. 2005 : 1 cuon
3. 1998 : 3 cuon
e. Viết hàm menu sau đó là hàm main thực hiện các thao tác
- Mẫu hàm : int Menu();
- Hàm trả về giá trị menu nếu được chọn trong [1…5]
1. Nhập n cuốn sách
2. Xuất n cuốn sách
3. Đếm theo tác giả
4. Thống kê
5. Thoát

Bài 3. Làm việc với ma trận vuông: Viết các hàm sau làm việc với ma trận nguyên vuông có
sử dụng cấp phát bộ nhớ động cho mảng hai chiều thông qua toán tử new hoặc hàm calloc
hay malloc
a. Hàm cấp phát bộ nhớ động
- Mẫu hàm : void CapPhat1(int n, int **&amp;a);
- Hoặc mẫu hàm int **CapPhat2(int n);
- Cấp phát bộ nhớ cho con trỏ hai chiều đối với hàm CapPhat 2 trả về con trỏ đã được cấp
phát.
b. Hàm giải phóng bộ nhớ có mẫu hàm void XoaBN(int n, int **a)
c. Nhập ma trận vuông từ bàn phím
- Mẫu hàm : void Nhap(int &amp;n, int **&amp;a);
- Gọi hàm cấp phát để cấp phát động cho con trỏ a
- Nhập dữ liệu từ bàn phím
d. Xuất ma trận ra màn hình dạng bảng có
- Mẫu hàm void Xuat(int n, int **a)
e. Kiểm tra ma trận có đối xứng qua đường chéo phụ không?
- Mẫu hàm : int DoiXungPhu(int n, int **a);
- Hàm trả về 0 nếu không đối xứng và 1 nếu ngược lại

f. Liệt kê các hàng có tổng max
- Mẫu hàm : void LietKe(int n, int **a);
g. Viết hàm menu sau đó là hàm main thực hiện các thao tác
- Mẫu hàm : int Menu();
- Hàm trả về giá trị menu nếu được chọn trong [1…5]
1. Nhập ma trận
2. Xuất ma trận
3. Kiểm tra đối xứng
4. Liệt kê các hàng có tổng max
5. Thoát

Bài 4. Khai báo cấu trúc tự trỏ Node gồm hai thành phần int Item và Node *Next để tạo danh
sách liên kết đơn. Viết các hàm thực hiện các công việc sau:
a. Hàm tạo ra Node mới
- Mẫu hàm : Node *TaoMoi(int x = 0);
- Tạo ra một Node mới thông qua cấp phát bộ nhớ cho con trỏ Node *p = new Node; và
gán giá trị x
- Hàm trả về con trỏ p đã được cấp phát và gán giá trị.
b. Hàm thêm mới vào đầu danh sách
- Mẫu hàm : Node *ThemDau(Node *H,int x);
- Tạo ra một Node mới nhờ hàm TaoMoi ở mục a, nối vào đầu danh sách H (chú ý
trường hợp H=NULL)
- Hàm trả về con trỏ H đã được bổ sung vào đầu.
c. Hàm thêm mới vào cuối danh sách
- Mẫu hàm : void ThemCuoi(Node *&amp;H,int x);
- Tạo ra một Node mới nhờ hàm TaoMoi ở mục a, nối vào cuối danh sách H (chú ý
trường hợp H=NULL)
- Hàm truyền tham biến con trỏ H đã được bổ sung vào đầu.
d. Hàm tạo danh sách liên kết đơn kiểu LIFO bằng cách cứ nhập liên tục dữ liệu tới khi số
0 thì dừng và không bổ sung số 0
- Mẫu hàm : void LIFO(Node *&amp;H);
e. Hàm tạo danh sách liên kết đơn kiểu FIFO bằng cách nhập trước số phần tử n và bổ
sung vào cuối danh sách
- Mẫu hàm : void FIFO(Node *&amp;H);

f. Hàm tạo xuất danh sách ra màn hình
- Mẫu hàm : void Xuat(Node *H);
g. Xóa một giá trị x ra khỏi danh sách liên kết nếu có
- Mẫu hàm : void Xoa(Node *&amp;H, int x);
- Tìm vị trí x xuất hiện đầu tiên để xóa (có thể viết hàm đệ quy)
h. Viết hàm menu sau đó là hàm main thực hiện các thao tác
- Mẫu hàm : int Menu();
- Hàm trả về giá trị menu nếu được chọn trong [1…7]
1. Tạo DS LIFO a
2. Tạo DS FIFO b
3. Xuất a
4. Xuất b
5. Nhập x và xóa 1 x ra khỏi a
6. Nối lần lượt từng phần tử của b vào cuối dãy a
7. Thoát

Bài 5. Tạo danh sách móc nối đơn chứa từng hệ số và lũy thừa tương ứng của đa thức: Ví dụ
3x^3-4 thì được 2 Node móc nối [(3,3) ; (-4,0); NULL] nhập x tính giá trị của đa thức, đạo
hàm tại x. Tạo hai đa thức thông qua 2 danh sách liên kết đơn; tính tổng hai đa thức